#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace shapeomatic_server.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LocalDB")]
	public partial class DALDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertfriend(friend instance);
    partial void Updatefriend(friend instance);
    partial void Deletefriend(friend instance);
    #endregion
		
		public DALDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LocalDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DALDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<friend> friends
		{
			get
			{
				return this.GetTable<friend>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _facebookId;
		
		private string _name;
		
		private string _pic;
		
		private System.Nullable<int> _score;
		
		private EntitySet<friend> _friends;
		
		private EntitySet<friend> _friends1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfacebookIdChanging(long value);
    partial void OnfacebookIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpicChanging(string value);
    partial void OnpicChanged();
    partial void OnscoreChanging(System.Nullable<int> value);
    partial void OnscoreChanged();
    #endregion
		
		public user()
		{
			this._friends = new EntitySet<friend>(new Action<friend>(this.attach_friends), new Action<friend>(this.detach_friends));
			this._friends1 = new EntitySet<friend>(new Action<friend>(this.attach_friends1), new Action<friend>(this.detach_friends1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facebookId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long facebookId
		{
			get
			{
				return this._facebookId;
			}
			set
			{
				if ((this._facebookId != value))
				{
					this.OnfacebookIdChanging(value);
					this.SendPropertyChanging();
					this._facebookId = value;
					this.SendPropertyChanged("facebookId");
					this.OnfacebookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pic", DbType="NVarChar(100)")]
		public string pic
		{
			get
			{
				return this._pic;
			}
			set
			{
				if ((this._pic != value))
				{
					this.OnpicChanging(value);
					this.SendPropertyChanging();
					this._pic = value;
					this.SendPropertyChanged("pic");
					this.OnpicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", DbType="Int")]
		public System.Nullable<int> score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_friend", Storage="_friends", ThisKey="facebookId", OtherKey="facebookId1")]
		public EntitySet<friend> friends
		{
			get
			{
				return this._friends;
			}
			set
			{
				this._friends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_friend1", Storage="_friends1", ThisKey="facebookId", OtherKey="facebookId2")]
		public EntitySet<friend> friends1
		{
			get
			{
				return this._friends1;
			}
			set
			{
				this._friends1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_friends(friend entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_friends(friend entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_friends1(friend entity)
		{
			this.SendPropertyChanging();
			entity.user1 = this;
		}
		
		private void detach_friends1(friend entity)
		{
			this.SendPropertyChanging();
			entity.user1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.friend")]
	public partial class friend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _facebookId1;
		
		private long _facebookId2;
		
		private EntityRef<user> _user;
		
		private EntityRef<user> _user1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfacebookId1Changing(long value);
    partial void OnfacebookId1Changed();
    partial void OnfacebookId2Changing(long value);
    partial void OnfacebookId2Changed();
    #endregion
		
		public friend()
		{
			this._user = default(EntityRef<user>);
			this._user1 = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facebookId1", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long facebookId1
		{
			get
			{
				return this._facebookId1;
			}
			set
			{
				if ((this._facebookId1 != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfacebookId1Changing(value);
					this.SendPropertyChanging();
					this._facebookId1 = value;
					this.SendPropertyChanged("facebookId1");
					this.OnfacebookId1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facebookId2", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long facebookId2
		{
			get
			{
				return this._facebookId2;
			}
			set
			{
				if ((this._facebookId2 != value))
				{
					if (this._user1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfacebookId2Changing(value);
					this.SendPropertyChanging();
					this._facebookId2 = value;
					this.SendPropertyChanged("facebookId2");
					this.OnfacebookId2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_friend", Storage="_user", ThisKey="facebookId1", OtherKey="facebookId", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.friends.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.friends.Add(this);
						this._facebookId1 = value.facebookId;
					}
					else
					{
						this._facebookId1 = default(long);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_friend1", Storage="_user1", ThisKey="facebookId2", OtherKey="facebookId", IsForeignKey=true)]
		public user user1
		{
			get
			{
				return this._user1.Entity;
			}
			set
			{
				user previousValue = this._user1.Entity;
				if (((previousValue != value) 
							|| (this._user1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user1.Entity = null;
						previousValue.friends1.Remove(this);
					}
					this._user1.Entity = value;
					if ((value != null))
					{
						value.friends1.Add(this);
						this._facebookId2 = value.facebookId;
					}
					else
					{
						this._facebookId2 = default(long);
					}
					this.SendPropertyChanged("user1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
